            - name: Upload a Build Artifact
  uses: actions/upload-artifact@v4.5.0
  with:
    # Artifact name
    name: # optional, default is artifact
    # A file, directory or wildcard pattern that describes what to upload
    path: 
    # The desired behavior if no files are found using the provided path.
Available Options:
  warn: Output a warning but do not fail the action
  error: Fail the action with an error message
  ignore: Do not output any warnings or errors, the action does not fail            - name: Deploy Preview Environment
  # You may pin to the exact commit or the version.
  # uses: okteto/deploy-preview@45ba981ff25e64d90eecd5d0ad5b43af295e6b39
  uses: okteto/deploy-preview@latest
  with:
    # The name of the preview environment to create
    name: 
    # The length of time to wait for completion, zero means never. Any other values should contain a corresponding time unit e.g. 1s, 2m, 3h  (default 5m0s)
    timeout: # optional
    # The scope of preview env to create. Allowed values are: personal or global. Defaults to global.
    scope: # optional, default is global
    # Variables to be used by the pipeline. If several variables are present, they should be separated by commas e.g. VAR1=VAL1,VAR2=VAL2,VAR3=VAL3
    variables: # optional
    # Path to the manifest file
    file: # optional
    # The branch to deploy
    branch: # optional
    # Log level string. Valid options are debug, info, warn, error
    log-level: # optional
                      - name: terraform-plan-storage
  # You may pin to the exact commit or the version.
  # uses: cloudposse/github-action-terraform-plan-storage@55b5d342c1eefee79e661b2709e91b19b4361c6d
  uses: cloudposse/github-action-terraform-plan-storage@1.14.0
  with:
    # which action to perform. Valid values are: 'storePlan', 'getPlan', 'taintPlan'
    action: # default is storePlan
    # the name of the Azure Blob Storage account to store the plan file
    blobAccountName: # optional
    # the name of the Azure Blob Storage container to store the plan file
    blobContainerName: # optional
    # the name of the S3 bucket to store the plan file
    bucketName: # optional, default is terraform-plan-storage
    # Commit SHA to use for fetching plan
    commitSHA: # optional, default is 
    # the name of the component corresponding to the plan file
    component: # optional
    # the connection string to the CosmosDB account to store the metadata
    cosmosConnectionString: # optional
    # the name of the CosmosDB container to store the metadata
    cosmosContainerName: # optional
    # the name of the CosmosDB database to store the metadata
    cosmosDatabaseName: # optional
    # the endpoint of the CosmosDB account to store the metadata
    cosmosEndpoint: # optional
    # Fail if plan is missing
    failOnMissingPlan: # optional, default is true
    # the type of repository where the plan file is stored. Valid values are: 'dynamo', 'cosmodb'
    metadataRepositoryType: # optional, default is dynamo
    # path to the Terraform plan file. Required for 'storePlan' and 'getPlan' actions
    planPath: # optional
    # the type of repository where the metadata is stored. Valid values are: 's3', 'azureblob'
    planRepositoryType: # optional, default is s3
    # the name of the stack corresponding to the plan file
    stack: # optional
    # the name of the dynamodb table to store metadata
    tableName: # optional, default is terraform-plan-storage
          

    if-no-files-found: # optional, default is warn
    # Duration after which artifact will expire in days. 0 means using default retention.
Minimum 1 day. Maximum 90 days unless changed from the repository settings page.

    retention-days: # optional
    # The level of compression for Zlib to be applied to the artifact archive. The value can range from 0 to 9: - 0: No compression - 1: Best speed - 6: Default compression (same as GNU Gzip) - 9: Best compression Higher levels will result in better compression, but will take longer to complete. For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.

    compression-level: # optional, default is 6
    # If true, an artifact with a matching name will be deleted before a new one is uploaded. If false, the action will fail if an artifact for the given name already exists. Does not fail if the artifact does not exist.

    overwrite: # optional, default is false
    # If true, hidden files will be included in the artifact. If false, hidden files will be excluded from the artifact.

    include-hidden-files: # optional, default is false
          # This workflow will build a docker container, publish and deploy it to Tencent Kubernetes Engine (TKE) when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Tencent Kubernetes Engine cluster,
#    including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace:
#    - TENCENT_CLOUD_SECRET_ID with Tencent Cloud secret id
#    - TENCENT_CLOUD_SECRET_KEY with Tencent Cloud secret key
#    - TENCENT_CLOUD_ACCOUNT_ID with Tencent Cloud account id
#    - TKE_REGISTRY_PASSWORD with TKE registry password
#
# 3. Change the values for the TKE_IMAGE_URL, TKE_REGION, TKE_CLUSTER_ID and DEPLOYMENT_NAME environment variables (below).

name: Tencent Kubernetes Engine

on:
  push:
    branches: [ "main" ]

# Environment variables available to all jobs and steps in this workflow
env:
  TKE_IMAGE_URL: ccr.ccs.tencentyun.com/demo/mywebapp
  TKE_REGION: ap-guangzhou
  TKE_CLUSTER_ID: cls-mywebapp
  DEPLOYMENT_NAME: tke-test

permissions:
  contents: read

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:

    - name: Checkout
      uses: actions/checkout@v4

    # Build
    - name: Build Docker image
      run: |
        docker build -t ${TKE_IMAGE_URL}:${GITHUB_SHA} .

    - name: Login TKE Registry
      run: |
        docker login -u ${{ secrets.TENCENT_CLOUD_ACCOUNT_ID }} -p '${{ secrets.TKE_REGISTRY_PASSWORD }}' ${TKE_IMAGE_URL}

    # Push the Docker image to TKE Registry
    - name: Publish
      run: |
        docker push ${TKE_IMAGE_URL}:${GITHUB_SHA}

    - name: Set up Kustomize
      run: |
        curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    - name: Set up ~/.kube/config for connecting TKE cluster
      uses: TencentCloud/tke-cluster-credential-action@v1
      with:
        secret_id: ${{ secrets.TENCENT_CLOUD_SECRET_ID }}
        secret_key: ${{ secrets.TENCENT_CLOUD_SECRET_KEY }}
        tke_region: ${{ env.TKE_REGION }}
        cluster_id: ${{ env.TKE_CLUSTER_ID }}

    - name: Switch to TKE context
      run: |
        kubectl config use-context ${TKE_CLUSTER_ID}-context-default

    # Deploy the Docker image to the TKE cluster
    - name: Deploy
      run: |
        ./kustomize edit set image ${TKE_IMAGE_URL}:${GITHUB_SHA}
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/${DEPLOYMENT_NAME}
        kubectl get services -o wide
